import { __awaiter, __generator } from "tslib";
import { promises as fs } from "fs";
import { DataGetterError } from "./DataGetter";
/**
 * A data getter that loads the time series data from CSV files.
 *
 * *Returns `undefined` for the "source last updated at" date, as there is no way to determine this
 * without connecting to the GitHub repo.
 *
 * For more information about its methods see {@link DataGetter}.
 */
var FileGetter = /** @class */ (function () {
    function FileGetter(globalConfirmedCSVPath, globalDeathsCSVPath, globalRecoveredCSVPath, usConfirmedCSVPath, usDeathsCSVPath) {
        this.globalConfirmedCSVPath = globalConfirmedCSVPath;
        this.globalDeathsCSVPath = globalDeathsCSVPath;
        this.globalRecoveredCSVPath = globalRecoveredCSVPath;
        this.usConfirmedCSVPath = usConfirmedCSVPath;
        this.usDeathsCSVPath = usDeathsCSVPath;
    }
    FileGetter.getFileAsString = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fs.readFile(path)];
                    case 1: return [2 /*return*/, (_a.sent()).toString()];
                    case 2:
                        e_1 = _a.sent();
                        throw new DataGetterError(e_1.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FileGetter.prototype.getGlobalConfirmedData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FileGetter.getFileAsString(this.globalConfirmedCSVPath)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    FileGetter.prototype.getGlobalDeathsData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FileGetter.getFileAsString(this.globalDeathsCSVPath)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    FileGetter.prototype.getGlobalRecoveredData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FileGetter.getFileAsString(this.globalRecoveredCSVPath)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    FileGetter.prototype.getUSConfirmedData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FileGetter.getFileAsString(this.usConfirmedCSVPath)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    FileGetter.prototype.getUSDeathsData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FileGetter.getFileAsString(this.usDeathsCSVPath)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    FileGetter.prototype.getSourceLastUpdatedAt = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    return FileGetter;
}());
export { FileGetter };
//# sourceMappingURL=FileGetter.js.map