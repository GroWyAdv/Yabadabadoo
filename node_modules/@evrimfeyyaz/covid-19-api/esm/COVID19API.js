import { __assign, __awaiter, __extends, __generator, __spreadArrays } from "tslib";
import { COVID19APIError } from "./COVID19APIError";
import { FileGetter } from "./DataGetter/FileGetter";
import { GitHubGetter } from "./DataGetter/GitHubGetter";
import { DataStoreInvalidLocationError } from "./DataStore/DataStore";
import { IndexedDBStore } from "./DataStore/IndexedDBStore";
import { MemoryStore } from "./DataStore/MemoryStore";
import { formatGlobalParsedData, formatUSParsedData } from "./format";
import { dateKeyToDate, dateToDateKey, parseCSV } from "./parse";
import { US_LOCATIONS } from "./usLocations";
/**
 * Thrown when a method or property of an instance of {@link COVID19API} is called without it being
 * initialized first.
 */
var COVID19APINotInitializedError = /** @class */ (function (_super) {
    __extends(COVID19APINotInitializedError, _super);
    function COVID19APINotInitializedError() {
        var _this = _super.call(this, "The COVID-19 API is not initialized. Make sure to first call the `init` method.") || this;
        _this.name = "COVID19APINotInitializedError";
        Object.setPrototypeOf(_this, COVID19APINotInitializedError.prototype);
        return _this;
    }
    return COVID19APINotInitializedError;
}(COVID19APIError));
export { COVID19APINotInitializedError };
/**
 * Thrown when `init` is called more than once.
 */
var COVID19APIAlreadyInitializedError = /** @class */ (function (_super) {
    __extends(COVID19APIAlreadyInitializedError, _super);
    function COVID19APIAlreadyInitializedError() {
        var _this = _super.call(this, "The COVID-19 API is already initialized.") || this;
        _this.name = "COVID19APIAlreadyInitializedError";
        Object.setPrototypeOf(_this, COVID19APIAlreadyInitializedError.prototype);
        return _this;
    }
    return COVID19APIAlreadyInitializedError;
}(COVID19APIError));
export { COVID19APIAlreadyInitializedError };
/**
 * A class that provides a simple API for interacting with the JHU CSSE COVID-19 time series data.
 */
var COVID19API = /** @class */ (function () {
    function COVID19API(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.isInitialized = false;
        /**
         * @throws {@link DataGetterError} Thrown when there is an error getting the data.
         */
        this.getParsedGlobalConfirmedData = function () {
            return COVID19API.getParsedData(_this.dataGetter.getGlobalConfirmedData());
        };
        /**
         * @throws {@link DataGetterError} Thrown when there is an error getting the data.
         */
        this.getParsedGlobalDeathsData = function () {
            return COVID19API.getParsedData(_this.dataGetter.getGlobalDeathsData());
        };
        /**
         * @throws {@link DataGetterError} Thrown when there is an error getting the data.
         */
        this.getParsedGlobalRecoveredData = function () {
            return COVID19API.getParsedData(_this.dataGetter.getGlobalRecoveredData());
        };
        /**
         * @throws {@link DataGetterError} Thrown when there is an error getting the data.
         */
        this.getParsedUSConfirmedData = function () {
            return COVID19API.getParsedData(_this.dataGetter.getUSConfirmedData());
        };
        /**
         * @throws {@link DataGetterError} Thrown when there is an error getting the data.
         */
        this.getParsedUSDeathsData = function () {
            return COVID19API.getParsedData(_this.dataGetter.getUSDeathsData());
        };
        var lazyLoadUSData = options.lazyLoadUSData, dataValidityInMS = options.dataValidityInMS, onLoadingStatusChange = options.onLoadingStatusChange, fetch = options.fetch;
        this.lazyLoadUSData = lazyLoadUSData !== null && lazyLoadUSData !== void 0 ? lazyLoadUSData : true;
        this.dataValidityInMS = dataValidityInMS !== null && dataValidityInMS !== void 0 ? dataValidityInMS : 60 * 60 * 1000; // 1 hour
        this.onLoadingStatusChange = onLoadingStatusChange;
        var store = options.store, loadFrom = options.loadFrom, filePaths = options.filePaths;
        store = store !== null && store !== void 0 ? store : "memory";
        loadFrom = loadFrom !== null && loadFrom !== void 0 ? loadFrom : "github";
        filePaths = filePaths !== null && filePaths !== void 0 ? filePaths : {
            globalConfirmedCSVPath: "time_series_covid19_confirmed_global.csv",
            globalDeathsCSVPath: "time_series_covid19_deaths_global.csv",
            globalRecoveredCSVPath: "time_series_covid19_recovered_global.csv",
            usConfirmedCSVPath: "time_series_covid19_confirmed_US.csv",
            usDeathsCSVPath: "time_series_covid19_deaths_US.csv",
        };
        switch (store) {
            case "indexeddb":
                this.dataStore = new IndexedDBStore();
                break;
            case "memory":
                this.dataStore = new MemoryStore();
        }
        switch (loadFrom) {
            case "files":
                this.dataGetter = new FileGetter(filePaths.globalConfirmedCSVPath, filePaths.globalDeathsCSVPath, filePaths.globalRecoveredCSVPath, filePaths.usConfirmedCSVPath, filePaths.usDeathsCSVPath);
                break;
            case "github":
                this.dataGetter = new GitHubGetter(fetch);
        }
    }
    Object.defineProperty(COVID19API.prototype, "locations", {
        /**
         * Returns the list of locations in the JHU CSSE dataset.
         *
         * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
         *   by calling the `init` method first.
         */
        get: function () {
            if (this._locations == null) {
                throw new COVID19APINotInitializedError();
            }
            return __spreadArrays(this._locations);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(COVID19API.prototype, "sourceLastUpdatedAt", {
        /**
         * Returns the date and time the source of the data was last updated at.
         *
         * If the data getter is not able to get the date that the source was last updated on, it might
         * return `undefined`.
         *
         * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
         *   by calling the `init` method first.
         */
        get: function () {
            if (!this.isInitialized) {
                throw new COVID19APINotInitializedError();
            }
            return this._sourceLastUpdatedAt ? new Date(this._sourceLastUpdatedAt.getTime()) : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(COVID19API.prototype, "firstDate", {
        /**
         * Returns the first day of the time series data.
         *
         * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
         *   by calling the `init` method first.
         */
        get: function () {
            if (this._firstDate == null) {
                throw new COVID19APINotInitializedError();
            }
            return new Date(this._firstDate.getTime());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(COVID19API.prototype, "lastDate", {
        /**
         * Returns the last day of the time series data.
         *
         * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
         *   by calling the `init` method first.
         */
        get: function () {
            if (this._lastDate == null) {
                throw new COVID19APINotInitializedError();
            }
            return new Date(this._lastDate.getTime());
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a parsed version of the given string containing comma separated values.
     *
     * @param csvPromise
     */
    COVID19API.getParsedData = function (csvPromise) {
        return __awaiter(this, void 0, void 0, function () {
            var csv;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, csvPromise];
                    case 1:
                        csv = _a.sent();
                        return [4 /*yield*/, parseCSV(csv)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Initializes the API. This must be called before calling other methods.
     *
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     * @throws {@link COVID19APIAlreadyInitializedError} Thrown when this method is called more than
     *   once.
     */
    COVID19API.prototype.init = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.isInitialized) {
                            throw new COVID19APIAlreadyInitializedError();
                        }
                        (_a = this.onLoadingStatusChange) === null || _a === void 0 ? void 0 : _a.call(this, true, "Initializing.");
                        return [4 /*yield*/, this.dataStore.init()];
                    case 1:
                        _c.sent();
                        return [4 /*yield*/, this.loadDataIfStoreHasNoFreshData()];
                    case 2:
                        _c.sent();
                        return [4 /*yield*/, this.setSourceLastUpdatedAt()];
                    case 3:
                        _c.sent();
                        return [4 /*yield*/, this.setLocations()];
                    case 4:
                        _c.sent();
                        return [4 /*yield*/, this.setFirstAndLastDates()];
                    case 5:
                        _c.sent();
                        this.isInitialized = true;
                        (_b = this.onLoadingStatusChange) === null || _b === void 0 ? void 0 : _b.call(this, false);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns the location data for the given location name.
     *
     * *If the API is initialized to lazy load the US data, calling this also automatically loads
     * the US data if the given location name is of a US county or state.*
     *
     * @param location The full name of the location, e.g. `"US (Autauga, Alabama)"`.
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     * @throws {@link DataStoreInvalidLocationError} Thrown when the given location cannot be found
     *   in the store.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    COVID19API.prototype.getDataByLocation = function (location) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDataByLocations([location])];
                    case 1: return [2 /*return*/, (_a.sent())[0]];
                }
            });
        });
    };
    /**
     * Returns the location data for the given location names.
     *
     * *If the API is initialized to lazy load the US data, calling this also automatically loads
     * the US data if one of the given location names is of a US county or state.*
     *
     * @param locations An array containing the full names of the locations, e.g. `["US (Autauga,
     *   Alabama)", "Turkey"]`.
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     * @throws {@link DataStoreInvalidLocationError} Thrown when the given location cannot be found
     *   in the store.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    COVID19API.prototype.getDataByLocations = function (locations) {
        return __awaiter(this, void 0, void 0, function () {
            var forceLoadUSData, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isInitialized) {
                            throw new COVID19APINotInitializedError();
                        }
                        forceLoadUSData = false;
                        // Check if the user is requesting US state or county data.
                        if (locations.some(function (location) { return location !== "US" && location.includes("US"); })) {
                            forceLoadUSData = true;
                        }
                        return [4 /*yield*/, this.loadDataIfStoreHasNoFreshData(forceLoadUSData)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.dataStore.getLocationData(locations)];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data.map(this.addCalculatedValues)];
                }
            });
        });
    };
    /**
     * Returns the location data for the given location name and date.
     *
     * *If the API is initialized to lazy load the US data, calling this also automatically loads
     * the US data if the given location name is of a US county or state.*
     *
     * @param location The full name of the location, e.g. `"US (Autauga, Alabama)"`.
     * @param date
     * @returns A Promise that will resolve to a {@link ValuesOnDate} object, of `undefined` if there
     *   is no data available for the given date.
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     * @throws {@link DataStoreInvalidLocationError} Thrown when the given location cannot be found
     *   in the store.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    COVID19API.prototype.getDataByLocationAndDate = function (location, date) {
        return __awaiter(this, void 0, void 0, function () {
            var locationData, dateStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDataByLocation(location)];
                    case 1:
                        locationData = _a.sent();
                        dateStr = dateToDateKey(date);
                        return [2 /*return*/, locationData.values.find(function (dateValues) { return dateValues.date === dateStr; })];
                }
            });
        });
    };
    /**
     * Checks if the data store already has data AND it is not stale, i.e. hasn't expired based on
     * the `dataValidityInMS` option.
     */
    COVID19API.prototype.hasFreshDataInStore = function () {
        return __awaiter(this, void 0, void 0, function () {
            var savedAt, locationCount, dataValidity, expirationTime;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.dataStore.getSavedAt()];
                    case 1:
                        savedAt = _a.sent();
                        return [4 /*yield*/, this.dataStore.getLocationCount()];
                    case 2:
                        locationCount = _a.sent();
                        if (savedAt == null || locationCount === 0) {
                            return [2 /*return*/, false];
                        }
                        dataValidity = this.dataValidityInMS;
                        expirationTime = savedAt.getTime() + dataValidity;
                        return [2 /*return*/, Date.now() < expirationTime];
                }
            });
        });
    };
    /**
     * Returns `true` if the data store already has US county-level data.
     */
    COVID19API.prototype.hasUSDataInStore = function () {
        return __awaiter(this, void 0, void 0, function () {
            var someUSCounty, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        someUSCounty = "US (Autauga, Alabama)";
                        return [4 /*yield*/, this.dataStore.getLocationData([someUSCounty])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof DataStoreInvalidLocationError) {
                            return [2 /*return*/, false];
                        }
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The internal location data only includes confirmed cases, deaths and recoveries data. This
     * method adds extra calculated values to the data, such as new confirmed cases and case fatality
     * rate.
     *
     * @param locationData
     */
    COVID19API.prototype.addCalculatedValues = function (locationData) {
        var calculatedValues = locationData.values.map(function (valuesOnDate, index) {
            var _a;
            var newConfirmed = 0;
            var newRecovered = null;
            var newDeaths = null;
            var recoveryRate = 0;
            var caseFatalityRate = 0;
            var activeCases = null;
            var confirmed = valuesOnDate.confirmed, recovered = valuesOnDate.recovered, deaths = valuesOnDate.deaths;
            if (recovered != null && deaths != null) {
                activeCases = confirmed - (recovered + deaths);
            }
            if (index > 0) {
                var yesterdaysData = (_a = locationData.values) === null || _a === void 0 ? void 0 : _a[index - 1];
                if (recovered != null && (yesterdaysData === null || yesterdaysData === void 0 ? void 0 : yesterdaysData.recovered) != null) {
                    newRecovered = recovered - yesterdaysData.recovered;
                }
                if (deaths != null && (yesterdaysData === null || yesterdaysData === void 0 ? void 0 : yesterdaysData.deaths) != null) {
                    newDeaths = deaths - yesterdaysData.deaths;
                }
                if ((yesterdaysData === null || yesterdaysData === void 0 ? void 0 : yesterdaysData.confirmed) != null) {
                    newConfirmed = confirmed - yesterdaysData.confirmed;
                }
                if (confirmed > 0) {
                    recoveryRate = recovered != null ? recovered / confirmed : null;
                    caseFatalityRate = deaths != null ? deaths / confirmed : null;
                }
            }
            return __assign(__assign({}, valuesOnDate), { newConfirmed: newConfirmed,
                newRecovered: newRecovered,
                newDeaths: newDeaths,
                recoveryRate: recoveryRate,
                caseFatalityRate: caseFatalityRate,
                activeCases: activeCases });
        });
        return __assign(__assign({}, locationData), { values: calculatedValues });
    };
    /**
     * Internally sets the date that the source of the data was last updated.
     *
     * When using {@link GitHubGetter}, this is the last commit date of the source CSV files.
     */
    COVID19API.prototype.setSourceLastUpdatedAt = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.dataStore.getSourceLastUpdatedAt()];
                    case 1:
                        _a._sourceLastUpdatedAt = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Internally sets the list of locations that are available in the data store, as well as the US
     * state and county location names even if they are not yet loaded, so that they can still be
     * requested even when they are lazy loaded.
     */
    COVID19API.prototype.setLocations = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, someStateIndex;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.dataStore.getLocationsList()];
                    case 1:
                        _a._locations = _b.sent();
                        someStateIndex = this._locations.indexOf("US (Alabama)");
                        // If we haven't yet loaded the US state and county data,
                        // add the US location names to the locations list, so that
                        // the user can request them.
                        if (someStateIndex === -1) {
                            this._locations = __spreadArrays(this._locations, US_LOCATIONS);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Internally sets the first and the last date that the data store has data for.
     */
    COVID19API.prototype.setFirstAndLastDates = function () {
        return __awaiter(this, void 0, void 0, function () {
            var someGlobalLocation, someGlobalLocationData, someGlobalLocationValues, dataSetLength;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        someGlobalLocation = "Australia";
                        return [4 /*yield*/, this.dataStore.getLocationData([someGlobalLocation])];
                    case 1:
                        someGlobalLocationData = (_a.sent())[0];
                        someGlobalLocationValues = someGlobalLocationData.values;
                        dataSetLength = someGlobalLocationValues.length;
                        this._firstDate = dateKeyToDate(someGlobalLocationValues[0].date);
                        this._lastDate = dateKeyToDate(someGlobalLocationValues[dataSetLength - 1].date);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Loads data if the store does not have data or the data in the store is expired.
     *
     * @param forceLoadUSData When `true`, loads the US county-level data even when `lazyLoadUSData`
     *   option is also set to `true`.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    COVID19API.prototype.loadDataIfStoreHasNoFreshData = function (forceLoadUSData) {
        var _a, _b;
        if (forceLoadUSData === void 0) { forceLoadUSData = false; }
        return __awaiter(this, void 0, void 0, function () {
            var hasFreshData, hasUSData, sourceLastUpdatedAt;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.hasFreshDataInStore()];
                    case 1:
                        hasFreshData = _c.sent();
                        return [4 /*yield*/, this.hasUSDataInStore()];
                    case 2:
                        hasUSData = _c.sent();
                        if (!(!hasUSData && forceLoadUSData)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.loadUSStateAndCountyData()];
                    case 3:
                        _c.sent();
                        return [4 /*yield*/, this.dataGetter.getSourceLastUpdatedAt()];
                    case 4:
                        sourceLastUpdatedAt = _c.sent();
                        return [4 /*yield*/, this.dataStore.setSourceLastUpdatedAt(sourceLastUpdatedAt)];
                    case 5:
                        _c.sent();
                        if (!((sourceLastUpdatedAt != null && sourceLastUpdatedAt.getTime() > Date.now()) ||
                            !hasFreshData)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.loadGlobalData()];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7:
                        if (this.isInitialized) {
                            (_a = this.onLoadingStatusChange) === null || _a === void 0 ? void 0 : _a.call(this, false);
                        }
                        return [2 /*return*/];
                    case 8:
                        if (!!hasFreshData) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.dataStore.clearData()];
                    case 9:
                        _c.sent();
                        return [4 /*yield*/, this.loadGlobalData()];
                    case 10:
                        _c.sent();
                        if (!(forceLoadUSData || !this.lazyLoadUSData)) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.loadUSStateAndCountyData()];
                    case 11:
                        _c.sent();
                        _c.label = 12;
                    case 12: return [4 /*yield*/, this.dataGetter.getSourceLastUpdatedAt()];
                    case 13:
                        sourceLastUpdatedAt = _c.sent();
                        return [4 /*yield*/, this.dataStore.setSourceLastUpdatedAt(sourceLastUpdatedAt)];
                    case 14:
                        _c.sent();
                        _c.label = 15;
                    case 15:
                        if (this.isInitialized) {
                            (_b = this.onLoadingStatusChange) === null || _b === void 0 ? void 0 : _b.call(this, false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Loads the data global confirmed cases, deaths and recoveries data from the data store.
     *
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    COVID19API.prototype.loadGlobalData = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var parsedGlobalConfirmedData, parsedGlobalDeathsData, parsedGlobalRecoveredData, formattedGlobalData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        (_a = this.onLoadingStatusChange) === null || _a === void 0 ? void 0 : _a.call(this, true, "Loading the global data.");
                        return [4 /*yield*/, this.getParsedGlobalConfirmedData()];
                    case 1:
                        parsedGlobalConfirmedData = _b.sent();
                        return [4 /*yield*/, this.getParsedGlobalDeathsData()];
                    case 2:
                        parsedGlobalDeathsData = _b.sent();
                        return [4 /*yield*/, this.getParsedGlobalRecoveredData()];
                    case 3:
                        parsedGlobalRecoveredData = _b.sent();
                        formattedGlobalData = formatGlobalParsedData(parsedGlobalConfirmedData, parsedGlobalDeathsData, parsedGlobalRecoveredData);
                        return [4 /*yield*/, this.dataStore.putLocationData(formattedGlobalData)];
                    case 4:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Loads the US state and county data for confirmed cases and deaths from the data store.
     *
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    COVID19API.prototype.loadUSStateAndCountyData = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var parsedUSConfirmedData, parsedUSDeathsData, formattedUSData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        (_a = this.onLoadingStatusChange) === null || _a === void 0 ? void 0 : _a.call(this, true, "Loading the US data. This might take a little while.");
                        return [4 /*yield*/, this.getParsedUSConfirmedData()];
                    case 1:
                        parsedUSConfirmedData = _b.sent();
                        return [4 /*yield*/, this.getParsedUSDeathsData()];
                    case 2:
                        parsedUSDeathsData = _b.sent();
                        formattedUSData = formatUSParsedData(parsedUSConfirmedData, parsedUSDeathsData);
                        return [4 /*yield*/, this.dataStore.putLocationData(formattedUSData)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return COVID19API;
}());
export { COVID19API };
//# sourceMappingURL=COVID19API.js.map