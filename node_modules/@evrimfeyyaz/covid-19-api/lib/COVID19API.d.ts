import { COVID19APIError } from "./COVID19APIError";
import { Fetch, LocationData, ValuesOnDate } from "./types";
declare type LoadFromOptions = "github" | "files";
declare type StoreOptions = "memory" | "indexeddb";
declare type FilePaths = {
    globalConfirmedCSVPath: string;
    globalDeathsCSVPath: string;
    globalRecoveredCSVPath: string;
    usConfirmedCSVPath: string;
    usDeathsCSVPath: string;
};
export interface COVID19APIOptions {
    /**
     * Where to load the data from. Either the JHU CSSE GitHub repository or from CSV files.
     *
     * The default is `"github"`.
     */
    loadFrom?: LoadFromOptions;
    /**
     * Where to store the data, and query it from. Either memory or IndexedDB.
     *
     * The default is `"memory"`.
     */
    store?: StoreOptions;
    /**
     * If `"files"` is selected for the `loadFrom` option, you can optionally enter the paths to the
     * CSV files.
     *
     * If this is omitted, it is assumed that the files are in the same folder, and have the
     * following default names:
     *
     * - time_series_covid19_confirmed_global.csv
     * - time_series_covid19_deaths_global.csv
     * - time_series_covid19_recovered_global.csv
     * - time_series_covid19_confirmed_US.csv
     * - time_series_covid19_deaths_US.csv
     */
    filePaths?: FilePaths;
    /**
     * Whether to only load the US state and county data when it is requested.
     *
     * The US state and county data is much bigger than the global data, so it usually makes sense to
     * lazy load it for a better user experience.
     *
     * The default is `true`.
     */
    lazyLoadUSData?: boolean;
    /**
     * The duration in milliseconds that the data in the data store should be valid for.
     *
     * After this duration, the data is automatically re-fetched either from GitHub or reloaded from
     * local files, depending on the `loadFrom` option.
     *
     * The default is 1 hour.
     */
    dataValidityInMS?: number;
    /**
     * The `fetch` function to use, mainly needed for NodeJS. When this is not provided, it is
     * assumed that there is a `fetch` function in the global object.
     */
    fetch?: Fetch;
    /**
     * Provide a callback function to receive updates on the loading status of an API instance.
     */
    onLoadingStatusChange?: (isLoading: boolean, loadingMessage?: string) => void;
}
/**
 * Thrown when a method or property of an instance of {@link COVID19API} is called without it being
 * initialized first.
 */
export declare class COVID19APINotInitializedError extends COVID19APIError {
    constructor();
}
/**
 * Thrown when `init` is called more than once.
 */
export declare class COVID19APIAlreadyInitializedError extends COVID19APIError {
    constructor();
}
/**
 * A class that provides a simple API for interacting with the JHU CSSE COVID-19 time series data.
 */
export declare class COVID19API {
    private readonly dataValidityInMS;
    private readonly lazyLoadUSData;
    private readonly onLoadingStatusChange;
    private isInitialized;
    private readonly dataStore;
    private readonly dataGetter;
    constructor(options?: COVID19APIOptions);
    private _locations;
    /**
     * Returns the list of locations in the JHU CSSE dataset.
     *
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     */
    get locations(): string[];
    private _sourceLastUpdatedAt;
    /**
     * Returns the date and time the source of the data was last updated at.
     *
     * If the data getter is not able to get the date that the source was last updated on, it might
     * return `undefined`.
     *
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     */
    get sourceLastUpdatedAt(): Date | undefined;
    private _firstDate;
    /**
     * Returns the first day of the time series data.
     *
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     */
    get firstDate(): Date;
    private _lastDate;
    /**
     * Returns the last day of the time series data.
     *
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     */
    get lastDate(): Date;
    /**
     * Returns a parsed version of the given string containing comma separated values.
     *
     * @param csvPromise
     */
    private static getParsedData;
    /**
     * Initializes the API. This must be called before calling other methods.
     *
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     * @throws {@link COVID19APIAlreadyInitializedError} Thrown when this method is called more than
     *   once.
     */
    init(): Promise<void>;
    /**
     * Returns the location data for the given location name.
     *
     * *If the API is initialized to lazy load the US data, calling this also automatically loads
     * the US data if the given location name is of a US county or state.*
     *
     * @param location The full name of the location, e.g. `"US (Autauga, Alabama)"`.
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     * @throws {@link DataStoreInvalidLocationError} Thrown when the given location cannot be found
     *   in the store.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    getDataByLocation(location: string): Promise<LocationData>;
    /**
     * Returns the location data for the given location names.
     *
     * *If the API is initialized to lazy load the US data, calling this also automatically loads
     * the US data if one of the given location names is of a US county or state.*
     *
     * @param locations An array containing the full names of the locations, e.g. `["US (Autauga,
     *   Alabama)", "Turkey"]`.
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     * @throws {@link DataStoreInvalidLocationError} Thrown when the given location cannot be found
     *   in the store.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    getDataByLocations(locations: string[]): Promise<LocationData[]>;
    /**
     * Returns the location data for the given location name and date.
     *
     * *If the API is initialized to lazy load the US data, calling this also automatically loads
     * the US data if the given location name is of a US county or state.*
     *
     * @param location The full name of the location, e.g. `"US (Autauga, Alabama)"`.
     * @param date
     * @returns A Promise that will resolve to a {@link ValuesOnDate} object, of `undefined` if there
     *   is no data available for the given date.
     * @throws {@link COVID19APINotInitializedError} Thrown when the API instance is not initialized
     *   by calling the `init` method first.
     * @throws {@link DataStoreInvalidLocationError} Thrown when the given location cannot be found
     *   in the store.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    getDataByLocationAndDate(location: string, date: Date): Promise<ValuesOnDate | undefined>;
    /**
     * Checks if the data store already has data AND it is not stale, i.e. hasn't expired based on
     * the `dataValidityInMS` option.
     */
    private hasFreshDataInStore;
    /**
     * Returns `true` if the data store already has US county-level data.
     */
    private hasUSDataInStore;
    /**
     * The internal location data only includes confirmed cases, deaths and recoveries data. This
     * method adds extra calculated values to the data, such as new confirmed cases and case fatality
     * rate.
     *
     * @param locationData
     */
    private addCalculatedValues;
    /**
     * Internally sets the date that the source of the data was last updated.
     *
     * When using {@link GitHubGetter}, this is the last commit date of the source CSV files.
     */
    private setSourceLastUpdatedAt;
    /**
     * Internally sets the list of locations that are available in the data store, as well as the US
     * state and county location names even if they are not yet loaded, so that they can still be
     * requested even when they are lazy loaded.
     */
    private setLocations;
    /**
     * Internally sets the first and the last date that the data store has data for.
     */
    private setFirstAndLastDates;
    /**
     * Loads data if the store does not have data or the data in the store is expired.
     *
     * @param forceLoadUSData When `true`, loads the US county-level data even when `lazyLoadUSData`
     *   option is also set to `true`.
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private loadDataIfStoreHasNoFreshData;
    /**
     * Loads the data global confirmed cases, deaths and recoveries data from the data store.
     *
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private loadGlobalData;
    /**
     * Loads the US state and county data for confirmed cases and deaths from the data store.
     *
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private loadUSStateAndCountyData;
    /**
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private getParsedGlobalConfirmedData;
    /**
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private getParsedGlobalDeathsData;
    /**
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private getParsedGlobalRecoveredData;
    /**
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private getParsedUSConfirmedData;
    /**
     * @throws {@link DataGetterError} Thrown when there is an error getting the data.
     */
    private getParsedUSDeathsData;
}
export {};
