"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexedDBStore = void 0;
var tslib_1 = require("tslib");
var idb_1 = require("idb");
var DataStore_1 = require("./DataStore");
/**
 * A data store that saves to and loads from an IndexedDB database.
 *
 * For more information about its methods see {@link DataStore}.
 */
var IndexedDBStore = /** @class */ (function () {
    function IndexedDBStore() {
        this.savedAtKey = "DataSavedAt";
        this.sourceLastUpdatedAtKey = "DataSourceLastUpdatedAt";
        this.dbName = "COVID19APIDB";
        this.dbVersion = 1;
    }
    Object.defineProperty(IndexedDBStore.prototype, "db", {
        get: function () {
            if (this._db == null) {
                throw new DataStore_1.DataStoreNotInitializedError();
            }
            return this._db;
        },
        enumerable: false,
        configurable: true
    });
    IndexedDBStore.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setDB()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBStore.prototype.clearData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tx;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tx = this.db.transaction(["data", "settings"], "readwrite");
                        return [4 /*yield*/, tx.objectStore("data").clear()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, tx.objectStore("settings").clear()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBStore.prototype.getLocationData = function (locations) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dataStore, data, _i, locations_1, location_1, locationData;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataStore = this.db.transaction("data").objectStore("data");
                        data = [];
                        _i = 0, locations_1 = locations;
                        _a.label = 1;
                    case 1:
                        if (!(_i < locations_1.length)) return [3 /*break*/, 4];
                        location_1 = locations_1[_i];
                        return [4 /*yield*/, dataStore.get(location_1)];
                    case 2:
                        locationData = _a.sent();
                        if (locationData == null) {
                            throw new DataStore_1.DataStoreInvalidLocationError(location_1);
                        }
                        data.push(locationData);
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, data];
                }
            });
        });
    };
    IndexedDBStore.prototype.getStatesData = function (countryOrRegion) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var countiesAndStates;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.getAllFromIndex("data", "byCountryOrRegion", countryOrRegion)];
                    case 1:
                        countiesAndStates = _a.sent();
                        return [2 /*return*/, countiesAndStates.filter(function (s) { return s.county == null; })];
                }
            });
        });
    };
    IndexedDBStore.prototype.getCountiesData = function (countryOrRegion, provinceOrState) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var countiesAndState;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.getAllFromIndex("data", "byProvinceOrState", provinceOrState)];
                    case 1:
                        countiesAndState = _a.sent();
                        return [2 /*return*/, countiesAndState.filter(function (data) { return data.countryOrRegion === countryOrRegion && data.county != null; })];
                }
            });
        });
    };
    IndexedDBStore.prototype.getLocationsList = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.getAllKeys("data")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IndexedDBStore.prototype.getLocationCount = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.count("data")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IndexedDBStore.prototype.getSavedAt = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.get("settings", this.savedAtKey)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    IndexedDBStore.prototype.getSourceLastUpdatedAt = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.get("settings", this.sourceLastUpdatedAtKey)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    IndexedDBStore.prototype.putLocationData = function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tx, dataStore, _i, data_1, locationData, settingsStore;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tx = this.db.transaction(["data", "settings"], "readwrite");
                        dataStore = tx.objectStore("data");
                        _i = 0, data_1 = data;
                        _a.label = 1;
                    case 1:
                        if (!(_i < data_1.length)) return [3 /*break*/, 4];
                        locationData = data_1[_i];
                        return [4 /*yield*/, dataStore.put(locationData)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        settingsStore = tx.objectStore("settings");
                        return [4 /*yield*/, settingsStore.put(new Date(), this.savedAtKey)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBStore.prototype.setSourceLastUpdatedAt = function (lastUpdatedAt) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.put("settings", lastUpdatedAt, this.sourceLastUpdatedAtKey)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Opens an IndexedDB connection.
     *
     * If the database is not yet created, it also creates it. If the database exists but is an older
     * version, it upgrades it.
     */
    IndexedDBStore.prototype.setDB = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, idb_1.openDB(this.dbName, this.dbVersion, {
                                upgrade: function (db, _oldVersion, _newVersion, transaction) {
                                    db.createObjectStore("data", { keyPath: "location" });
                                    db.createObjectStore("settings");
                                    var dataStore = transaction.objectStore("data");
                                    dataStore.createIndex("byCountryOrRegion", "countryOrRegion");
                                    dataStore.createIndex("byProvinceOrState", "provinceOrState");
                                },
                            })];
                    case 1:
                        _a._db = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return IndexedDBStore;
}());
exports.IndexedDBStore = IndexedDBStore;
//# sourceMappingURL=IndexedDBStore.js.map