"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDateKeys = exports.parseCSV = exports.dateToDateKey = exports.dateKeyToDate = exports.getLocationInfoFromRow = void 0;
var tslib_1 = require("tslib");
var csv_parse_1 = tslib_1.__importDefault(require("csv-parse"));
var utils_1 = require("./utils");
/**
 * The column names in global data CSV files.
 */
var globalCSVColumnTitles = {
    countryOrRegion: "Country/Region",
    provinceOrState: "Province/State",
    latitude: "Lat",
    longitude: "Long",
};
/**
 * The column names in US data CSV files.
 */
var usCSVColumnTitles = {
    countryOrRegion: "Country_Region",
    provinceOrState: "Province_State",
    county: "Admin2",
    longitude: "Long_",
};
/**
 * The column names to use in parsed data objects.
 */
var columnTitles = tslib_1.__assign(tslib_1.__assign({}, globalCSVColumnTitles), { county: "County", population: "Population" });
/**
 * The format of the date columns in the CSV files is "month/day/year", e.g. "1/2/20" for
 * January 2, 2020. This is the regular expression for parsing them.
 */
var dateKeyRegex = /^(\d{1,2})\/(\d{1,2})\/(\d{2})$/;
/**
 * Returns an object containing the location information in a {@link ParsedCSVRow}.
 *
 * @param row
 */
function getLocationInfoFromRow(row) {
    var countryOrRegion = row[columnTitles.countryOrRegion];
    var provinceOrState = row[columnTitles.provinceOrState];
    var county = row[columnTitles.county];
    var location = utils_1.getFullLocationName(countryOrRegion, provinceOrState, county);
    var latitude = row[columnTitles.latitude];
    var longitude = row[columnTitles.longitude];
    return {
        location: location,
        countryOrRegion: countryOrRegion,
        provinceOrState: provinceOrState,
        county: county,
        latitude: latitude,
        longitude: longitude,
    };
}
exports.getLocationInfoFromRow = getLocationInfoFromRow;
/**
 * Converts a string containing a date to a Date object, if it is in the right format,
 * such as "1/2/20".
 *
 * @param dateKey A string containing a date in the format "month/date/year", e.g. "1/2/20".
 */
function dateKeyToDate(dateKey) {
    var dateParts = dateKey.match(dateKeyRegex);
    if (dateParts == null || dateParts.length < 3) {
        return undefined;
    }
    var year = parseInt("20" + dateParts[3]);
    var month = parseInt(dateParts[1]) - 1;
    var day = parseInt(dateParts[2]);
    return new Date(year, month, day);
}
exports.dateKeyToDate = dateKeyToDate;
/**
 * Converts the given Date object to a string in "month/day/year" format, e.g. "1/2/20".
 *
 * @param date
 */
function dateToDateKey(date) {
    var year = date.getFullYear().toString().slice(2);
    var month = (date.getMonth() + 1).toString();
    var day = date.getDate().toString();
    return month + "/" + day + "/" + year;
}
exports.dateToDateKey = dateToDateKey;
/**
 * Returns `true` if the given column name is a date.
 *
 * @param columnName
 */
function isDateKey(columnName) {
    return dateKeyRegex.test(columnName);
}
/**
 * The CSV files containing the US county data have different column names than the files
 * containing the global data. This method converts the US data column names to the ones we
 * internally use (see {@link columnTitles}.
 *
 * @param columnName
 */
function getProperColumnName(columnName) {
    switch (columnName) {
        case usCSVColumnTitles.provinceOrState:
            return columnTitles.provinceOrState;
        case usCSVColumnTitles.countryOrRegion:
            return columnTitles.countryOrRegion;
        case usCSVColumnTitles.longitude:
            return columnTitles.longitude;
        case usCSVColumnTitles.county:
            return columnTitles.county;
        default:
            return columnName;
    }
}
/**
 * Returns a function that the CSV parser can use to read each line of a CSV file and accumulate
 * the read data in the given object.
 *
 * @param parser
 * @param parsedCSV The {@link ParsedCSV} object that each read line is accumulated into.
 */
function getParserReadListener(parser, parsedCSV) {
    return function () {
        while (true) {
            var record = parser.read();
            if (record == null) {
                break;
            }
            var countryOrRegion = record[columnTitles.countryOrRegion];
            var provinceOrState = record[columnTitles.provinceOrState];
            var county = record[columnTitles.county];
            var location_1 = utils_1.getFullLocationName(countryOrRegion, provinceOrState, county);
            parsedCSV[location_1] = record;
        }
    };
}
/**
 * Casts the values read by the CSV reader to the correct types, and unifies column names used in
 * different files.
 *
 * @param value
 * @param context
 */
function castCSVData(value, context) {
    if (context.header) {
        return getProperColumnName(value);
    }
    if (isDateKey(context.column)) {
        return parseInt(value);
    }
    if (value === "" &&
        (context.column === columnTitles.provinceOrState || context.column === columnTitles.county)) {
        return undefined;
    }
    return value;
}
/**
 * Parses the contents of a CSV file from the JHU CSSE time series data.
 *
 * @param csv
 */
function parseCSV(csv) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var parser = csv_parse_1.default(csv, {
                        columns: true,
                        trim: true,
                        cast: castCSVData,
                    });
                    var parsedCSV = {};
                    parser.on("readable", getParserReadListener(parser, parsedCSV));
                    parser.on("error", function (error) {
                        reject(error);
                    });
                    parser.on("end", function () { return resolve(parsedCSV); });
                })];
        });
    });
}
exports.parseCSV = parseCSV;
/**
 * Returns the keys of a {@link ParsedCSV} that are dates.
 *
 * @param parsedCSV
 */
function getDateKeys(parsedCSV) {
    var firstLocation = Object.keys(parsedCSV)[0];
    var rowKeys = Object.keys(parsedCSV[firstLocation]);
    return rowKeys.filter(function (columnName) { return isDateKey(columnName); });
}
exports.getDateKeys = getDateKeys;
//# sourceMappingURL=parse.js.map