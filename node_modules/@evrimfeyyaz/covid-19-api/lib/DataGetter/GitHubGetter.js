"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubGetter = void 0;
var tslib_1 = require("tslib");
var DataGetter_1 = require("./DataGetter");
/**
 * A data getter that fetches the time series data from the JHU CSSE GitHub repository.
 *
 * For more information about its methods see {@link DataGetter}.
 */
var GitHubGetter = /** @class */ (function () {
    function GitHubGetter(fetchFn) {
        this.commitDataUrl = "https://api.github.com/repos/CSSEGISandData/COVID-19/commits?path=csse_covid_19_data%2Fcsse_covid_19_time_series&page=1&per_page=1";
        this.baseUrl = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/";
        this.globalConfirmedUrl = this.baseUrl + "time_series_covid19_confirmed_global.csv";
        this.globalDeathsUrl = this.baseUrl + "time_series_covid19_deaths_global.csv";
        this.globalRecoveredUrl = this.baseUrl + "time_series_covid19_recovered_global.csv";
        this.usConfirmedUrl = this.baseUrl + "time_series_covid19_confirmed_US.csv";
        this.usDeathsUrl = this.baseUrl + "time_series_covid19_deaths_US.csv";
        // This is a hack for getting the global object.
        // See: https://stackoverflow.com/a/3277192
        var get = eval;
        var global = get("this");
        if (fetchFn == null && typeof global !== "undefined" && typeof fetch !== "undefined") {
            // We need to bind the fetch function to the global object, e.g. window, for it to work.
            this.fetch = global.fetch.bind(global);
        }
        else if (fetchFn != null) {
            this.fetch = fetchFn;
        }
        else {
            throw new Error("`fetch` is not available. Please check the COVID-19 API documentation for more information.");
        }
    }
    GitHubGetter.prototype.getGlobalConfirmedData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchData(this.globalConfirmedUrl)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    GitHubGetter.prototype.getGlobalDeathsData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchData(this.globalDeathsUrl)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    GitHubGetter.prototype.getGlobalRecoveredData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchData(this.globalRecoveredUrl)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    GitHubGetter.prototype.getUSConfirmedData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchData(this.usConfirmedUrl)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    GitHubGetter.prototype.getUSDeathsData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchData(this.usDeathsUrl)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    GitHubGetter.prototype.getSourceLastUpdatedAt = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, json;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(this.commitDataUrl)];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new DataGetter_1.DataGetterError("There was an error fetching the commit date from the GitHub API. Response status: " + response.status + " - " + response.statusText);
                        }
                        return [4 /*yield*/, response.json()];
                    case 2:
                        json = _a.sent();
                        return [2 /*return*/, new Date(json[0]["commit"]["author"]["date"])];
                }
            });
        });
    };
    GitHubGetter.prototype.fetchData = function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rawResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(url)];
                    case 1:
                        rawResponse = _a.sent();
                        if (!rawResponse.ok) {
                            throw new DataGetter_1.DataGetterError("There was an error fetching the data from GitHub. Response status: " + rawResponse.status + " - " + rawResponse.statusText);
                        }
                        return [4 /*yield*/, rawResponse.text()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return GitHubGetter;
}());
exports.GitHubGetter = GitHubGetter;
//# sourceMappingURL=GitHubGetter.js.map