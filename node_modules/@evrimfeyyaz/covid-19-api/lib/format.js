"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatUSParsedData = exports.formatGlobalParsedData = void 0;
var tslib_1 = require("tslib");
var parse_1 = require("./parse");
var usStates_1 = require("./usStates");
var utils_1 = require("./utils");
/**
 * Sums confirmed cases, deaths and recoveries in the given {@link InternalLocationData} objects.
 *
 * @param data
 */
function sumMultipleLocationValues(data) {
    var sum = [];
    data.forEach(function (_a, index) {
        var values = _a.values;
        if (index === 0) {
            sum = tslib_1.__spreadArrays(values);
            return;
        }
        values.forEach(function (valuesOnDate, index) {
            var totalValuesOnDate = sum[index];
            var date = valuesOnDate.date, confirmed = valuesOnDate.confirmed, deaths = valuesOnDate.deaths, recovered = valuesOnDate.recovered;
            var totalConfirmed = confirmed + totalValuesOnDate.confirmed;
            var totalDeaths = totalValuesOnDate.deaths;
            if (deaths != null) {
                totalDeaths = (totalDeaths !== null && totalDeaths !== void 0 ? totalDeaths : 0) + deaths;
            }
            var totalRecovered = totalValuesOnDate.recovered;
            if (recovered != null) {
                totalRecovered = (totalRecovered !== null && totalRecovered !== void 0 ? totalRecovered : 0) + recovered;
            }
            sum[index] = {
                date: date,
                confirmed: totalConfirmed,
                deaths: totalDeaths,
                recovered: totalRecovered,
            };
        });
    });
    return sum;
}
/**
 * Calculates the data for Australia.
 *
 * *The values for Australia are represented separately for each state in the JHU CSSE data. This
 * function calculates the country totals by summing the data for all the states in Australia.*
 *
 * @param australiaStateData {@link InternalLocationData} array containing the data for all the
 *   states of Australia.
 */
function getAustraliaTotalData(australiaStateData) {
    var australiaTotalValues = sumMultipleLocationValues(australiaStateData);
    // Latitude and longitude are from https://www.latlong.net/.
    return {
        location: "Australia",
        countryOrRegion: "Australia",
        values: australiaTotalValues,
        latitude: "-25.274399",
        longitude: "133.775131",
    };
}
/**
 * Calculates the data for Canada.
 *
 * *The values for Canada are represented separately for each state in the JHU CSSE data. This
 * function calculates the country totals by summing the data for all the provinces in Canada.*
 *
 * *Also, there is no recoveries data for any of the provinces of Canada in the JHU CSSE data, but
 * there is recoveries data for Canada as a whole. This function incorporates this recoveries data
 * into the returned {@link InternalLocationData} object.
 *
 * @param globalParsedRecoveredDataCSV The {@link ParsedCSV} object containing the global
 *   recoveries time series data.
 * @param canadaProvinceData {@link InternalLocationData} array containing the data for all the
 *   provinces of Canada.
 */
function getCanadaTotalData(globalParsedRecoveredDataCSV, canadaProvinceData) {
    var canadaTotalValues = sumMultipleLocationValues(canadaProvinceData);
    var parsedCanadaRecoveredValues = globalParsedRecoveredDataCSV["Canada"];
    var dateKeys = parse_1.getDateKeys(globalParsedRecoveredDataCSV);
    // The JHU data doesn't include the recovered data for the provinces of Canada,
    // but includes the recovered data for the whole country.
    dateKeys.forEach(function (date, index) {
        canadaTotalValues[index].recovered = parsedCanadaRecoveredValues[date];
    });
    // Latitude and longitude are from the JHU CSSE global recoveries CSV file.
    return {
        location: "Canada",
        countryOrRegion: "Canada",
        values: canadaTotalValues,
        latitude: "56.1304",
        longitude: "-106.3468",
    };
}
/**
 * Calculates the data for China.
 *
 * *The values for China are represented separately for each province in the JHU CSSE data. This
 * function calculates the country totals by summing the data for all the provinces in China.*
 *
 * @param chinaProvinceData {@link InternalLocationData} array containing the data for all the
 *   provinces of China.
 */
function getChinaTotalData(chinaProvinceData) {
    var chinaTotalValues = sumMultipleLocationValues(chinaProvinceData);
    // Latitude and longitude are from https://www.latlong.net/.
    return {
        location: "China",
        countryOrRegion: "China",
        values: chinaTotalValues,
        latitude: "35.861660",
        longitude: "104.195396",
    };
}
/**
 * Calculates the data for all US states.
 *
 * *The values in the US data files only include data at the county level. This function calculates
 * state totals by summing the data for all counties of a given state.*
 *
 * @param usCountyData {@link InternalLocationData} array containing the data for all of the
 *   counties in the USA.
 * @returns An array of {@link InternalLocationData} with each element containing the data for a US
 *   state.
 */
function getUSStateTotalsData(usCountyData) {
    var data = [];
    var _loop_1 = function (state) {
        var name_1 = state.name, latitude = state.latitude, longitude = state.longitude;
        var stateCountiesData = usCountyData.filter(function (locationData) { return locationData.provinceOrState === name_1; });
        var stateTotalValues = sumMultipleLocationValues(stateCountiesData);
        var location_1 = utils_1.getFullLocationName("US", name_1);
        data.push({
            location: location_1,
            countryOrRegion: "US",
            provinceOrState: name_1,
            values: stateTotalValues,
            latitude: latitude,
            longitude: longitude,
        });
    };
    for (var _i = 0, US_STATES_1 = usStates_1.US_STATES; _i < US_STATES_1.length; _i++) {
        var state = US_STATES_1[_i];
        _loop_1(state);
    }
    return data;
}
/**
 * Extracts values (confirmed cases, deaths and recoveries) from the given CSV rows.
 *
 * @param dateKeys All keys of the given {@link ParsedCSVRow} objects that contain a value for a
 *   certain day.
 * @param confirmedData A {@link ParsedCSVRow} object containing the confirmed cases data for a
 *   location.
 * @param deathsData A {@link ParsedCSVRow} object containing the deaths data for a certain
 *   location.
 * @param recoveredData A {@link ParsedCSVRow} object containing the recoveries data for a
 *   location.
 */
function getValuesFromParsedRows(dateKeys, confirmedData, deathsData, recoveredData) {
    return dateKeys.map(function (date) {
        var confirmed = confirmedData[date];
        var deaths = null;
        if (deathsData != null) {
            deaths = deathsData[date];
        }
        var recovered = null;
        if (recoveredData != null) {
            recovered = recoveredData[date];
        }
        return {
            date: date,
            confirmed: confirmed,
            deaths: deaths,
            recovered: recovered,
        };
    });
}
/**
 * Converts parsed CSV objects into an easier to consume format.
 *
 * @param parsedConfirmedData
 * @param parsedDeathsData
 * @param parsedRecoveredData
 */
function formatParsedData(parsedConfirmedData, parsedDeathsData, parsedRecoveredData) {
    var dateKeys = parse_1.getDateKeys(parsedConfirmedData);
    var data = [];
    for (var location_2 in parsedConfirmedData) {
        if (!parsedConfirmedData.hasOwnProperty(location_2)) {
            continue;
        }
        var confirmedData = parsedConfirmedData[location_2];
        var _a = parse_1.getLocationInfoFromRow(confirmedData), countryOrRegion = _a.countryOrRegion, provinceOrState = _a.provinceOrState, county = _a.county, latitude = _a.latitude, longitude = _a.longitude;
        // Remove Canada (Recovered) and Canada (Diamond Princess)
        // from the parsed data, they seem like mistakenly included values.
        if (countryOrRegion === "Canada" &&
            (provinceOrState === "Recovered" || provinceOrState === "Diamond Princess")) {
            continue;
        }
        var deathsData = parsedDeathsData === null || parsedDeathsData === void 0 ? void 0 : parsedDeathsData[location_2];
        var recoveredData = parsedRecoveredData === null || parsedRecoveredData === void 0 ? void 0 : parsedRecoveredData[location_2];
        var values = getValuesFromParsedRows(dateKeys, confirmedData, deathsData, recoveredData);
        var locationData = {
            location: location_2,
            countryOrRegion: countryOrRegion,
            provinceOrState: provinceOrState,
            county: county,
            latitude: latitude,
            longitude: longitude,
            values: values,
        };
        data.push(locationData);
    }
    return data;
}
/**
 * Converts parsed CSV objects that contain global COVID-19 time series into an easier to consume
 * format.
 *
 * @param parsedGlobalConfirmedData
 * @param parsedGlobalDeathsData
 * @param parsedGlobalRecoveredData
 */
function formatGlobalParsedData(parsedGlobalConfirmedData, parsedGlobalDeathsData, parsedGlobalRecoveredData) {
    var data = formatParsedData(parsedGlobalConfirmedData, parsedGlobalDeathsData, parsedGlobalRecoveredData);
    var ausCanChnData = data.filter(function (locationData) {
        return locationData.countryOrRegion === "Australia" ||
            locationData.countryOrRegion === "Canada" ||
            locationData.countryOrRegion === "China";
    });
    var australiaStateData = ausCanChnData.filter(function (locationData) { return locationData.countryOrRegion === "Australia"; });
    var canadaProvinceData = ausCanChnData.filter(function (locationData) { return locationData.countryOrRegion === "Canada"; });
    var chinaProvinceData = ausCanChnData.filter(function (locationData) { return locationData.countryOrRegion === "China"; });
    var australiaTotalData = getAustraliaTotalData(australiaStateData);
    var canadaTotalData = getCanadaTotalData(parsedGlobalRecoveredData, canadaProvinceData);
    var chinaTotalData = getChinaTotalData(chinaProvinceData);
    data.push(australiaTotalData);
    data.push(canadaTotalData);
    data.push(chinaTotalData);
    return data;
}
exports.formatGlobalParsedData = formatGlobalParsedData;
/**
 * Converts parsed CSV objects that contain US COVID-19 time series into an easier to consume
 * format.
 *
 * @param parsedUSConfirmedData
 * @param parsedUsDeathsData
 */
function formatUSParsedData(parsedUSConfirmedData, parsedUsDeathsData) {
    var data = formatParsedData(parsedUSConfirmedData, parsedUsDeathsData);
    var usStateTotalsData = getUSStateTotalsData(data);
    return tslib_1.__spreadArrays(data, usStateTotalsData);
}
exports.formatUSParsedData = formatUSParsedData;
//# sourceMappingURL=format.js.map